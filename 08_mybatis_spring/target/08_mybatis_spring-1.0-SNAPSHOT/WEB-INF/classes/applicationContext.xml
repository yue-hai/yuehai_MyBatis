<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- Spring 配置文件 -->
    <!-- Spring 希望管理所有的业务逻辑组件，等。。。 -->

    <!-- spring 管理除控制器之外的组件 -->
    <context:component-scan base-package="com.yuehai.sm">
        <!-- 排除掉控制器，扫描其他的组件 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- spring 用来控制业务逻辑、数据源、事务控制、AOP等 -->

    <!-- 引入外部数据库的配置文件 -->
    <context:property-placeholder location="classpath:druid.properties" />
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!-- spring 的事务管理器 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 管理数据库链接的所有事务，开启链接、事务提交、关闭链接等 -->
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 开启基于注解的事务管理 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager" />

    <!--
        整合 MyBatis，目的：
            1、spring 管理所有组件，mapper 的实现类。
                service -> Dao   @Autowired：自动注入mapper
			2、spring 用来管理事务，spring 声明式事务
     -->
    <!-- 创建出 SqlSessionFactory 对象，让 spring ioc 一启动就代替我们创建 SqlSessionFactory 对象  -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- configLocation 指定 MyBatis 全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- mapperLocations: 指定 MyBatis sql 映射文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!-- 配置一个可以批量执行的 sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!-- 通过 SqlSessionFactory 对象工厂，创建一个可以批量执行的 sqlSession -->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean" />
        <constructor-arg name="executorType" value="BATCH" />
    </bean>

    <!-- 扫描所有的 mapper 接口文件，使他们可以自动注入 -->
    <mybatis-spring:scan base-package="com.yuehai.sm.dao" />

</beans>