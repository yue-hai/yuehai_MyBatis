<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- sql 映射文件 -->
<!-- namespace：名称空间，指定为 dao 接口的全类名 -->
<mapper namespace="com.yuehai.mybatis.dao.EmployeeMapperPlus">

    <!--
        自定义某个 JavaBean 的封装规则
            type：自定义规则的 Java 类型
            id：唯一标识符 id 方便引用
     -->
    <resultMap id="emp" type="com.yuehai.mybatis.bean.Employee">
        <!--
            指定主键列的封装规则
                id：定义主键会底层有优化
                column：指定对应数据库中的那一列
                property：指定对应的 JavaBean 属性
         -->
        <id column="id" property="id" />
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName" />
        <!-- 其他不指定的列会自动封装，但是我们只要写 resultMap 最好就把全部的映射规则都写上 -->
        <result column="gender" property="gender" />
        <result column="email" property="email" />
    </resultMap>

    <!-- 根据 id 查询 -->
    <!-- resultMap：自定义结果集映射规则，引用他的 id -->
    <select id="getEmployeeById" resultMap="emp">
        select id,last_name,email,gender from tbl_employee where id = #{id}
    </select>

    <!-- 联合查询，级联属性封装结果集 -->
    <resultMap id="difEmp" type="com.yuehai.mybatis.bean.Employee">
        <!-- 指定主键列的封装规则 -->
        <id column="id" property="id" />
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName" />
        <!-- 其他不指定的列会自动封装，但是我们只要写 resultMap 最好就把全部的映射规则都写上 -->
        <result column="gender" property="gender" />
        <result column="email" property="email" />
        <!-- association：嵌套结果集，可以指定联合的 JavaBean 对象
                property="dept"：指定哪个属性是当前类的联合的对象
                javaType：指定这个属性的类型，不能省略 -->
        <association property="dept" javaType="com.yuehai.mybatis.bean.Department" >
            <!-- 指定主键列的封装规则 -->
            <id column="did" property="id" />
            <result column="dept_name" property="departmentName" />
        </association>
    </resultMap>

    <!--
        场景一：关联查询：Employee 与 Department
            查询 Employee 的同时查询员工对应的部门，一个员工有与之对应的一个部门信息
     -->
    <select id="getEmpAndDept" resultMap="difEmp">
        SELECT e.id id,e.last_name last_name,e.gender gender,e.email email,
        d.id did,d.dept_name dept_name
        FROM tbl_employee e,tbl_dept d WHERE e.d_id=d.id AND e.id = #{id}
    </select>

    <!--
        使用 association 进行分步查询
        1、先按照员工 id 查询员工信息
            select id,last_name,email,gender,d_id from tbl_employee where id = 传入的 id
        2、再根据员工信息中的 d_id 的值去部门表查出部门信息
            SELECT id,dept_name departmentName FROM tbl_dept WHERE id = 上面查到的 d_id
        3、将部门信息设置到员工中
     -->
    <resultMap id="EmpByStep" type="com.yuehai.mybatis.bean.Employee">
        <!-- 指定主键列的封装规则 -->
        <id column="id" property="id" />
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName" />
        <!-- 其他不指定的列会自动封装，但是我们只要写 resultMap 最好就把全部的映射规则都写上 -->
        <result column="gender" property="gender" />
        <result column="email" property="email" />
        <!--
            association：定义关联对象的封装规则，可以指定联合的 JavaBean 对象
                property="dept"：指定哪个属性是当前类的联合的对象
                select：表明当前属性是调用 select 指定的方法查出的方法
                column：指定将哪一列的值传给这个方法

            流程：使用 select 指定的方法（传入 column 指定的这列参数的值）查出对象，
                 并封装给 property="dept"
         -->
        <association property="dept"
                     select="com.yuehai.mybatis.dao.DepartmentMapper.getDeptById"
                     column="d_id" >
            <!-- 指定主键列的封装规则 -->
            <id column="did" property="id" />
            <result column="dept_name" property="departmentName" />
        </association>
    </resultMap>

    <!-- 根据 id 查询，分步查询 -->
<!--    <select id="getEmpByIdStep" resultMap="EmpByStep">-->
<!--        select id,last_name,email,gender,d_id from tbl_employee where id = #{id}-->
<!--    </select>-->

    <!-- 按照部门 id 查询多个员工 -->
    <select id="getEmpsByDeptId" resultType="com.yuehai.mybatis.bean.Employee">
        select id,last_name,email,gender,d_id from tbl_employee where d_id = #{deptId}
    </select>

    <!--
		鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
		封装Employee：
			如果查出的是受：就把部门信息查询出来，否则不查询；
			如果是攻，把 last_name 这一列的值赋值给 email;
	 -->
    <resultMap id="empDis" type="com.yuehai.mybatis.bean.Employee">
        <!-- 指定主键列的封装规则 -->
        <id column="id" property="id" />
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName" />
        <result column="gender" property="gender" />
        <result column="email" property="email" />
        <!--
            discriminator：鉴别器
                column：指定要判定的列名
                javaType：列值对应的 Java 类型
         -->
        <discriminator column="gender" javaType="String">
            <!-- 受，resultType：指定封装的结果类型，不能缺少 -->
            <case value="0" resultType="com.yuehai.mybatis.bean.Employee">
                <!-- 运行查询语句 -->
                <association property="dept"
                     select="com.yuehai.mybatis.dao.DepartmentMapper.getDeptById"
                     column="d_id" />
            </case>
            <!-- 攻，把 last_name 这一列的值赋值给 email -->
            <case value="1" resultType="com.yuehai.mybatis.bean.Employee">
                <id column="id" property="id" />
                <id column="last_name" property="lastName" />
                <id column="gender" property="gender" />
                <!-- 把 last_name 这一列的值赋值给 email -->
                <id column="last_name" property="email" />
            </case>
        </discriminator>
    </resultMap>

    <!-- 根据 id 查询，分步查询 -->
    <select id="getEmpByIdStep" resultMap="empDis">
        select id,last_name,email,gender,d_id from tbl_employee where id = #{id}
    </select>

</mapper>